package group8_java.school_business_tour_management.views;

import group8_java.school_business_tour_management.common.MessageDialog;
import group8_java.school_business_tour_management.dao.StudentDAO;
import group8_java.school_business_tour_management.dao.StudentTourDAO;
import group8_java.school_business_tour_management.dao.TourDAO;
import group8_java.school_business_tour_management.models.Student;
import group8_java.school_business_tour_management.models.StudentTour;
import group8_java.school_business_tour_management.models.Tour;
import group8_java.school_business_tour_management.services.ClassroomService;
import group8_java.school_business_tour_management.services.CompanyService;
import group8_java.school_business_tour_management.services.StudentService;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pham Vu
 */
public class AddStudentToTour extends javax.swing.JFrame {

    /**
     * Creates new form ManageStudent
     */
    public AddStudentToTour() {
        initComponents();
        setLocationRelativeTo(null);
        initializeTable();
    }

    private void initializeTable() {
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"Mã sinh viên", "Họ", "Tên", "Ngày sinh", "Lớp", "SĐT", "Email", "Địa chỉ",});
        studentTable.setModel(tableModel);
        loadTableData();
    }

    private Tour selectedTour;

    public AddStudentToTour(Tour tour) {
        try {
            this.selectedTour = tour;
            initComponents();
            setLocationRelativeTo(null);
            initializeTable();
            screenTitle.setText("" + tour.getName() + " (Mã: " + tour.getCode() + ", công ty: " + CompanyService.getById(tour.getCompanyId()).getName() + ") - Ngày: " + tour.getStartDate());
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Có lỗi, chi tiết: " + ex.getMessage() + "\n" + ex.toString() + "\n", "Phát hiện lỗi");
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_back = new javax.swing.JButton();
        screenTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        addToListButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        findButton = new javax.swing.JButton();
        searchInput = new javax.swing.JTextField();
        resetButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Thêm sinh viên vào chuyến tham quan");

        btn_back.setText("Quay lại");
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        screenTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        screenTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        screenTitle.setText("Danh sách sinh viên");

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentTable);

        addToListButton.setText("Thêm sinh viên vào chuyến đi");
        addToListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToListButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Tìm kiếm sinh viên:");

        findButton.setText("Tìm kiếm");

        searchInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchInputKeyPressed(evt);
            }
        });

        resetButton.setText("Nhập lại");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Thêm sinh viên tham gia chuyến tham quan");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(screenTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addToListButton, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(findButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchInput)
                            .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btn_back)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(screenTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(addToListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        dispose();
        ManageTourStudent screen = new ManageTourStudent(selectedTour);
        screen.setLocationRelativeTo(null);
        screen.setVisible(true);
    }//GEN-LAST:event_btn_backActionPerformed

    private void addToListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToListButtonActionPerformed
        try {
            int chosenIndex[] = studentTable.getSelectedRows();
            if (chosenIndex.length == 0) {
                MessageDialog.showInfoDialog(this, "Chưa có sinh viên nào được chọn để thực hiện chức năng này", "Thông báo");
                return;
            }
            List<Student> chosenStudents = new ArrayList<>();
            for (int index : chosenIndex) {
                Student student = StudentService.getByCode(studentTable.getValueAt(index, 0).toString());
                if (student != null) {
                    chosenStudents.add(student);
                }
            }
            List<StudentTour> studentTourData = StudentTourDAO.readFromFile();
            if (selectedTour.getStudentTours() == null) {
                selectedTour.setStudentTours(new ArrayList<>());
            }

            for (Student student : chosenStudents) {
                StudentTour relationship = new StudentTour();
                relationship.setStudentId(student.getId());
                relationship.setRate(0);
                relationship.setTourId(selectedTour.getId());
                studentTourData.add(relationship);
                selectedTour.getStudentTours().add(relationship);
                if (student.getStudentTours() == null) {
                    student.setStudentTours(new ArrayList<>());
                }
                student.getStudentTours().add(relationship);
            }
            StudentTourDAO.writeToFile(studentTourData);

            List<Student> studentData = StudentDAO.readFromFile();
            for (int i = 0; i < studentData.size(); i++) {
                for (Student tempStudent : chosenStudents) {
                    if (studentData.get(i).getId() == tempStudent.getId()) {
                        studentData.set(i, tempStudent);
                    }
                }
            }
            StudentDAO.writeToFile(studentData);
            List<Tour> tourData = TourDAO.readFromFile();
            for (int i = 0; i < tourData.size(); i++) {
                if (tourData.get(i).getId() == selectedTour.getId()) {
                    tourData.set(i, selectedTour);
                    break;
                }
            }
            System.out.println("tourData: " + tourData);
            TourDAO.writeToFile(tourData);

            clearAllFields();
            MessageDialog.showInfoDialog(this, "Đã thêm thành công " + chosenIndex.length + " sinh viên vào chuyến tham quan!", "Thông báo");
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Có lỗi xảy ra khi thêm mới, chi tiết: " + ex.getMessage() + "\n" + ex.toString() + "\n", "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_addToListButtonActionPerformed

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked
        try {
            int index = studentTable.getSelectedRow();
            if (index == -1) {
                MessageDialog.showInfoDialog(this, "Vui chọn chọn sinh viên", "Thông báo");
                return;
            }
            Student selectedStudent = StudentService.getStudentByIndex(index);

        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Có lỗi, chi tiết: " + ex.getMessage() + "\n" + ex.toString() + "\n", "Phát hiện lỗi");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_studentTableMouseClicked

    private void handleSearchByKeyword() {
        try {
            String keyword = searchInput.getText().trim();
            if (keyword.trim().equals("")) {
                MessageDialog.showInfoDialog(this, "Chưa có từ khóa tìm kiếm", "Thông báo");
                return;
            }
            List<Student> data = StudentDAO.readFromFile();
            List<Student> displayData = new ArrayList<>();
            List<StudentTour> selectedData = new ArrayList<>();
            if (selectedTour.getStudentTours() != null) {
                selectedData = selectedTour.getStudentTours();
            }
            for (Student student : data) {
                boolean isExisted = false;
                for (StudentTour selectedRel : selectedData) {
                    if (selectedRel.getStudentId() == student.getId()) {
                        isExisted = true;
                        break;
                    }
                }
                if (!isExisted) {
                    displayData.add(student);
                }
            }
            tableModel.setRowCount(0);
            if (displayData != null) {
                for (Student stu : displayData) {
                    if (stu.getAddress().contains(keyword) || stu.getCode().contains(keyword) || stu.getFirstName().contains(keyword) || stu.getLastName().contains(keyword) || stu.getPhoneNumber().contains(keyword)) {
                        tableModel.addRow(
                                new Object[]{
                                    stu.getCode(),
                                    stu.getFirstName(),
                                    stu.getLastName(),
                                    ClassroomService.getById(stu.getClassId()).getName(),
                                    stu.getBirthDate(),
                                    stu.getPhoneNumber(),
                                    stu.getEmail(),
                                    stu.getAddress()
                                });
                    }
                }
            }
            tableModel.fireTableDataChanged();
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Tải dữ liệu cho bảng có lỗi! Chi tiết: " + ex.getMessage(), "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }

    private void searchInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchInputKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Handle Enter key press
            handleSearchByKeyword();
        }
    }//GEN-LAST:event_searchInputKeyPressed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void clearAllFields() {
        searchInput.setText("");
        loadTableData();
    }

    private DefaultTableModel tableModel;

    private void loadTableData() {
        try {
            List<Student> data = StudentDAO.readFromFile();
            List<Student> displayData = new ArrayList<>();
            List<StudentTour> selectedData = new ArrayList<>();
            if (selectedTour.getStudentTours() != null) {
                selectedData = selectedTour.getStudentTours();
            }

            for (Student student : data) {
                boolean isExisted = false;
                for (StudentTour selectedRel : selectedData) {
                    if (selectedRel.getStudentId() == student.getId()) {
                        isExisted = true;
                        break;
                    }
                }
                if (!isExisted) {
                    displayData.add(student);
                }
            }
            tableModel.setRowCount(0);
            if (displayData != null) {
                for (Student stu : displayData) {
                    tableModel.addRow(
                            new Object[]{
                                stu.getCode(),
                                stu.getLastName(),
                                stu.getFirstName(),
                                ClassroomService.getById(stu.getClassId()).getName(),
                                stu.getBirthDate(),
                                stu.getPhoneNumber(),
                                stu.getEmail(),
                                stu.getAddress()
                            });
                }
            }
            tableModel.fireTableDataChanged();
        } catch (Exception ex) {
            MessageDialog.showErrorDialog(this, "Tải dữ liệu cho bảng có lỗi! Chi tiết: " + ex.getMessage(), "Có lỗi xảy ra");
            ex.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddStudentToTour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddStudentToTour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddStudentToTour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddStudentToTour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddStudentToTour().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToListButton;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton findButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel screenTitle;
    private javax.swing.JTextField searchInput;
    private javax.swing.JTable studentTable;
    // End of variables declaration//GEN-END:variables
}
